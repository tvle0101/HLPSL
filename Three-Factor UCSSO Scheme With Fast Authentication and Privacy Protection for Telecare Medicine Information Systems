% Link: https://ieeexplore.ieee.org/document/9245470/

role user (U, TMIS: agent, SecureChannel: symmetric_key, Rabin: public_key, H: hash_func, SND, RCV: channel (dy))
played_by U def=

  local State: nat,
        R, Xi, Y, IDi, PWi, Bi, IDsj, M, E, Tu, A1, C1, Nij, Ts, A2, M1, Pa, Qa, Kij, KijNew, Wj, SKj: text

% System Initialization
  init State := 0

  transition

% Registration

	1.  State = 0 /\ RCV(start) =|>
		   State':= 1
		   /\ IDi' := new() /\ PWi' := new() /\ Bi' := new() %/\ Input IDi', PWi', and imprint Bi'
		   /\ R' := new()
		   /\ Xi' := H(PWi'.Bi')
		   /\ Y' := H(H(PWi'.R').xor(h(xor(IDi',IDsj)),R'))
		   /\ SND({IDi.Xi'.Y'}_SecureChannel)
		   /\ secret(R',r,{U})
		   /\ secret(IDi',idi,{U,TMIS})
		   /\ secret(PWi',pwi,{U})
		   /\ secret(Bi',bi,{U})

	2.  State = 1 /\ RCV({Rabin.({H(SKj).IDsj.IDi'.H(H(PWi'.R').xor(h(xor(IDi',IDsj)),R')).H(PWi'.Bi')}_SKj')}_SecureChannel) =|>
		   State':= 2
		   /\ Wj' := xor(R,({H(SKj).IDsj.IDi.Y.Xi}_SKj))
		   %/\ Store R, IDi, PWi and Bi in the smart card
		   %/\ Store Wj', IDsj and Rabin in the USB

% Login and First Authentication

	3.  State = 0 /\ RCV(start) =|>
		   State':= 1
		   %/\ Insert smart card %/\ Input IDi', PWi', and imprint Bi' % Smart card confirm Bi'
		   /\ Xi' := H(PWi.Bi)
		   /\ Y' := H(H(PWi.R).xor(h(xor(IDi,IDsj)),R))
		   /\ Tu' := new()
		   /\ A1' := xor(xor(Xi',Y'),Tu')
		   /\ Nij' := xor(R,Wj)
		   /\ E' := new() %/\ Suppose m = 4
		   /\ M' := H(H(H(H(E'))))
		   /\ C1' := {IDsj.IDi.A1'.Nij'.M'}_Rabin
		   /\ SND(C1'.Tu')
		   /\ witness(U,TMIS,e,E')
		   /\ witness(U,TMIS,tu,Tu')

	4.  State = 1 /\ RCV(({xor(H(H(H(H(H(E'))))),Ts')}_Kij').Ts') =|>
		   State':= 2
		   /\ A2' := xor(H(H(H(H(H(E'))))),Ts')
		   /\ Kij' := H(xor(M,Nij))
		   %/\ Confirm Ts' %/\ Confirm A2'
		   %/\ Store Kij' in the smart card
		   /\ request(TMIS,U,ts,Ts')

% Fast Authentication with New Session Key

 	5. State = 0 /\ RCV(start) =|>
		   State':= 1
		   %/\ input IDi', PWi', and imprint Bi' for smart card verification
		   %/\ Suppose alpha = 1
		   /\ M1':= H(H(H(E)))
		   /\ Pa' := {M1'}_Kij
		   /\ SND(Pa')

	6. State = 1 /\ RCV({H(H(H(E)))}_KijNew') =|>
		   State':= 2
		   /\ KijNew':= M1.Kij
		   /\ Qa':= {M1}_KijNew'
		   %/\ Check Qa'. If it is legitimate, then accept KijNew'

end role


role tmis (U, TMIS: agent, SecureChannel: symmetric_key, Rabin: public_key, H: hash_func, SND, RCV: channel (dy))
played_by TMIS def=

  local State: nat,
        R, Xi, Y, IDi, PWi, Bi, IDsj, M, E, Tu, A1, C1, Nij, Ts, A2, M1, Pa, Qa, C2, Kij, KijNew, Wj, SKj: text

% System Initialization
  init State := 0

  transition

% Registration

	1. State = 0 /\ RCV({IDi'.H(PWi'.Bi').H(H(PWi'.R').xor(h(xor(IDi',IDsj)),R'))}_SecureChannel) =|>
		   State':= 1
		   /\ SKj' := new() /\ Nij' := {H(SKj).IDsj.IDi'.H(H(PWi'.R').xor(h(xor(IDi',IDsj)),R')).H(PWi'.Bi')}_SKj'
		   %/\ Store IDi, Y, Xi
		   /\ SND({Rabin.Nij'}_SecureChannel)
		   /\ secret(SKj',skj,{TMIS})

% Login and First Authentication

	2. State = 0 /\ RCV(({IDsj.IDi.H(H(H(H(E')))).xor(xor(Xi,Y),Tu').Nij}_Rabin).Tu') =|>
		   State':= 1
		   %/\ Check Tu'
		   %/\ Confirm H(SKj), IDsj and IDi
		   /\ A1' := xor(xor(Xi,Y),Tu')
		   %/\ Check A1
		   /\ Ts' := new()
		   /\ A2' := xor(H(H(H(H(H(E'))))),Ts')
		   /\ Kij' := H(xor(H(H(H(H(E')))),Nij))
		   /\ C2' := {A2'}_Kij'
		   /\ SND (C2'.Ts')
		   /\ witness(TMIS,U,ts,Ts')
		   /\ request(U,TMIS,e,E')
		   /\ request(U,TMIS,tu,Tu')
		   /\ secret(Kij',kij,{U,TMIS})

% Fast Authentication with New Session Key

	3. State = 0 /\ RCV({H(H(H(E)))}_Kij) =|>
		   State':= 1
		   %/\ Check whether H(M1') = M. If there is a match, then M1' replaces M
		   /\ KijNew' := H(H(H(E))).Kij
		   %/\ KijNew' replaces Kij
		   /\ Qa':= {H(H(H(E)))}_KijNew'
		   /\ SND(Qa')
		   /\ secret(KijNew',kijnew,{U,TMIS})
end role

role session (U, TMIS: agent, SecureChannel: symmetric_key, Rabin: public_key, H: hash_func) def=

  local SU, RU, STMIS, RTMIS: channel (dy)

  composition

	user (U,TMIS,SecureChannel,Rabin,H,SU,RU)
          /\ tmis (U,TMIS,SecureChannel,Rabin,H,STMIS,RTMIS)

end role


role environment() def=

    const u, tmis: agent,
	  securechannel, kai: symmetric_key,
	  rabin, ki: public_key,
	  h: hash_func,
	  r, idi, pwi, bi, skj, kij, kijnew, e, tu, ts: protocol_id

    intruder_knowledge = {u,tmis,rabin,ki,inv(ki)}

    composition

	session(u,tmis,securechannel,rabin,h)
	/\ session(u,i,kai,rabin,h)
	/\ session(i,tmis,kai,rabin,h)

end role


goal

  secrecy_of r, idi, pwi, bi, skj, kij, kijnew
  authentication_on e, tu, ts

end goal



environment()
